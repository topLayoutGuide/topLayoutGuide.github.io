I"ð@<p>A while ago in the previous installment, I implemented the following effect, as seen in the AirBNB app, using ReactiveSwift.</p>

<p><img src="/assets/img/parallax.gif" /></p>

<p>In my never-ceasing desire to avoid as many third-party dependencies as possible, I decided to write it <em>for a third time</em>. Only this time I would use Combine.</p>

<p>It was fairly trivial to convert the ReactiveSwift code into Combine. I used the same view model structure Iâ€™ve used in previous posts too!</p>

<h3 id="setting-up-the-view-model">Setting Up The View Model</h3>

<p>In our sample project from Part I, make a new file and call it <code class="language-plaintext highlighter-rouge">MainViewModel</code>. Put the following inside it:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Combine</span>

<span class="kd">protocol</span> <span class="kt">ViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">Input</span><span class="p">:</span> <span class="kt">Equatable</span>
    <span class="k">var</span> <span class="nv">cancellables</span><span class="p">:</span> <span class="p">[</span><span class="kt">AnyCancellable</span><span class="p">]</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">apply</span><span class="p">(</span><span class="n">_</span> <span class="nv">input</span><span class="p">:</span> <span class="kt">Input</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">MainViewModel</span><span class="p">:</span> <span class="kt">ViewModel</span> <span class="p">{</span>

    <span class="c1">// MARK: - Init</span>
    <span class="c1">// Any dependencies (services, properties et al) can be injected here</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">bind</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">cancellables</span><span class="p">:</span> <span class="p">[</span><span class="kt">AnyCancellable</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1">// MARK: - Input</span>

    <span class="kd">enum</span> <span class="kt">Input</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
        
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">apply</span><span class="p">(</span><span class="n">_</span> <span class="nv">input</span><span class="p">:</span> <span class="kt">Input</span><span class="p">)</span> <span class="p">{</span>
        
    <span class="p">}</span>

    <span class="c1">// MARK: - Binding View Model</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Update your Input and Output areas with:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">scrollViewDidScrollSubject</span> <span class="o">=</span> <span class="kt">PassthroughSubject</span><span class="o">&lt;</span><span class="kt">Input</span><span class="o">.</span><span class="kt">ScrollInfo</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;</span><span class="p">()</span>

<span class="kd">enum</span> <span class="kt">Input</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
  <span class="kd">struct</span> <span class="kt">ScrollInfo</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">contentOffsetY</span><span class="p">:</span> <span class="kt">CGFloat</span>
    <span class="k">var</span> <span class="nv">topConstraintConstant</span><span class="p">:</span> <span class="kt">CGFloat</span>
    <span class="k">var</span> <span class="nv">heightOfViewToMove</span><span class="p">:</span> <span class="kt">CGFloat</span>
    <span class="k">var</span> <span class="nv">hasReachedTop</span><span class="p">:</span> <span class="kt">Bool</span>
    <span class="k">var</span> <span class="nv">hasReachedBottom</span><span class="p">:</span> <span class="kt">Bool</span>
  <span class="p">}</span>

  <span class="k">case</span> <span class="nf">scrollViewDidScroll</span><span class="p">(</span><span class="kt">ScrollInfo</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">apply</span><span class="p">(</span><span class="n">_</span> <span class="nv">input</span><span class="p">:</span> <span class="kt">Input</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">input</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">scrollViewDidScroll</span><span class="p">(</span><span class="k">let</span> <span class="nv">info</span><span class="p">):</span> <span class="n">scrollViewDidScrollSubject</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// MARK: - Output</span>
<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">scrollViewValue</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span></code></pre></figure>

<p>Finally, update the <code class="language-plaintext highlighter-rouge">bindIO()</code> func with <em>almost</em> the same logic that we used with the ReactiveSwift implementation! ðŸ™Œ</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="kd">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">scrollViewDidScrollSubject</span>
    <span class="o">.</span><span class="nf">scan</span><span class="p">(</span><span class="kt">Optional</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">Input</span><span class="o">.</span><span class="kt">ScrollInfo</span><span class="p">?,</span> <span class="kt">Input</span><span class="o">.</span><span class="kt">ScrollInfo</span><span class="p">)</span><span class="o">&gt;.</span><span class="k">none</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="nv">$0</span><span class="p">?</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$1</span><span class="p">)</span> <span class="p">}</span>
    <span class="o">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
    <span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">?</span><span class="o">.</span><span class="n">hasReachedTop</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="nv">$0</span><span class="p">?</span><span class="o">.</span><span class="n">hasReachedBottom</span> <span class="o">==</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$1</span><span class="o">.</span><span class="n">hasReachedTop</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$1</span><span class="o">.</span><span class="n">hasReachedBottom</span> <span class="p">}</span>
    <span class="o">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="n">previous</span><span class="p">,</span> <span class="n">current</span> <span class="o">-&gt;</span> <span class="kt">CGFloat</span><span class="p">?</span> <span class="k">in</span>
      <span class="k">guard</span> <span class="k">let</span> <span class="nv">previous</span> <span class="o">=</span> <span class="n">previous</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>

      <span class="k">let</span> <span class="nv">minimumConstantValue</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="o">-</span><span class="n">current</span><span class="o">.</span><span class="n">heightOfViewToMove</span><span class="p">)</span>
      <span class="k">let</span> <span class="nv">delta</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">contentOffsetY</span> <span class="o">-</span> <span class="n">previous</span><span class="o">.</span><span class="n">contentOffsetY</span>
      <span class="k">if</span> <span class="n">delta</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">min</span><span class="p">(</span><span class="n">current</span><span class="o">.</span><span class="n">topConstraintConstant</span> <span class="o">-</span> <span class="n">delta</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">minimumConstantValue</span><span class="p">,</span> <span class="n">current</span><span class="o">.</span><span class="n">topConstraintConstant</span> <span class="o">-</span> <span class="n">delta</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="o">.</span><span class="nf">assign</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">scrollViewValue</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<h4 id="step-by-step">Step By Step</h4>

<ul>
  <li>Take the subjectâ€¦</li>
  <li>Use <code class="language-plaintext highlighter-rouge">.scan</code> in place of <code class="language-plaintext highlighter-rouge">combinePrevious()</code> to take the previous and current values.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">.compactMap { $0 }</code> to trim out Optionals</li>
  <li>Use <code class="language-plaintext highlighter-rouge">.filter {}</code> to skip or permit operations. Think of it like an <code class="language-plaintext highlighter-rouge">if/else</code> block.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">.compactMap {}</code> again to return our final value.</li>
  <li>Assign the value</li>
  <li>Store the cancellable.</li>
</ul>

<h3 id="revisiting-the-view-controller">Revisiting The View Controller</h3>

<p>In your ViewController, add an instance of the ViewModel class. I suggest to make this instance <code class="language-plaintext highlighter-rouge">private</code> because a view model should <em>ideally</em> belong to a single view controller. Also add an array of cancellables.</p>

<p>Now, update the <code class="language-plaintext highlighter-rouge">UIScrollViewDelegate</code> implementation we previously used with:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIScrollViewDelegate</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">scrollViewDidScroll</span><span class="p">(</span><span class="n">_</span> <span class="nv">scrollView</span><span class="p">:</span> <span class="kt">UIScrollView</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">viewModel</span>
      <span class="o">.</span><span class="nf">apply</span><span class="p">(</span>
      <span class="o">.</span><span class="nf">scrollViewDidScroll</span><span class="p">(</span>
        <span class="o">.</span><span class="nf">init</span><span class="p">(</span>
          <span class="nv">contentOffsetY</span><span class="p">:</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span><span class="p">,</span>
          <span class="nv">topConstraintConstant</span><span class="p">:</span> <span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span><span class="p">,</span>
          <span class="nv">heightOfViewToMove</span><span class="p">:</span> <span class="n">movingView</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span><span class="p">,</span>
          <span class="nv">hasReachedTop</span><span class="p">:</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">hasReachedTop</span><span class="p">,</span>
          <span class="nv">hasReachedBottom</span><span class="p">:</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">hasReachedBottom</span>
        <span class="p">)</span>
      <span class="p">)</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Notice how we donâ€™t need <code class="language-plaintext highlighter-rouge">scrollViewWillBeginDragging</code> anymore, nor the <code class="language-plaintext highlighter-rouge">lastContentOffset</code> property, OR the <code class="language-plaintext highlighter-rouge">range</code> property!</p>

<h3 id="observing-the-value">Observing The Value</h3>

<p>Observing the change is a bit different with a Combine-based View Model, compared to a ReactiveSwift one. Itâ€™s pretty simple though!</p>

<p>Inside <code class="language-plaintext highlighter-rouge">viewDidLoad()</code>, start observing values:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">viewModel</span>
  <span class="o">.</span><span class="err">$</span><span class="n">scrollViewValue</span>
  <span class="o">.</span><span class="n">sink</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">value</span> <span class="k">in</span>
    <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">value</span>
  <span class="p">}</span>
  <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span></code></pre></figure>

<p>It doesnâ€™t matter that you start listening in <code class="language-plaintext highlighter-rouge">viewDidLoad</code> either. The <code class="language-plaintext highlighter-rouge">.sink { }</code> block will be called whenever thereâ€™s a value! The cancellables will be destroyed when the ViewController is. Werk!</p>

<h3 id="finally">Finally</h3>

<p>Doesnâ€™t it look nice!</p>

<p><img src="/assets/img/combine.gif" /></p>

<p>In the time since the first and second parts were written, I have extensively studied ReactiveSwift, RxSwift and Combine. So writing it in this way was easy for me.</p>

<p>As always, we need to be careful of UIKit behaviour changing in the future, so as always tread carefully. ðŸ˜‰</p>

<p>Thanks for reading! The source code is available on <a href="https://github.com/topLayoutGuide/ios-parallax-view">GITHUB</a> on the <code class="language-plaintext highlighter-rouge">combine-ver</code> branch.</p>
:ET