I"_<h4 id="next-stop-southern-cross-stat">Next stop: Southern Cross Stat…</h4>

<h3 id="intro">Intro</h3>

<p>There come times when building our apps, where we need a label to either <em>wrap</em> its text, or become a marquee in order to stop truncation of text. The latter effect is quite rare, but can be found in apps such as PayPay (Japan) while using their P2P payment system.</p>

<p>A few years ago, I needed this effect. So I built a <code class="language-plaintext highlighter-rouge">UIScrollLabel</code> - <em>10 points for an inventive title</em> - and put it on Github. I looked back upon it today, and realised that I thoroughly overcomplicated my solution.</p>

<h3 id="overcomplication">Overcomplication</h3>

<p>My original solution had a simple structure. It is a <code class="language-plaintext highlighter-rouge">UIScrollView</code> containing two <code class="language-plaintext highlighter-rouge">UILabel</code> with padding between them. It had some other configurable properties, and it utilised a <a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink">CADisplayLink</a> refreshing at the cadence of the display to scroll.</p>

<p>The drawback of <code class="language-plaintext highlighter-rouge">CADisplayLink</code> is simple - it refreshes at a minimum of 60 times <em>per second</em>, or whatever refresh rate the display uses. It was overkill.</p>

<p>The main reason I used <code class="language-plaintext highlighter-rouge">CADisplayLink</code> was to achieve the same sort of effects I did with my <code class="language-plaintext highlighter-rouge">UIAnimatedLabel</code>. I wanted the <code class="language-plaintext highlighter-rouge">.easeIn</code>, and <code class="language-plaintext highlighter-rouge">.easeOut</code> (et al) animation curves available to me.</p>

<h3 id="today">Today</h3>

<p>I had a task at work which required me to fish out this code from my repository, and reimplement it. Revisiting the old code, as a more ~jaded~ wizened iOS engineer, I realised I could drastically trim it down.</p>

<p>I could keep the same structure - a <code class="language-plaintext highlighter-rouge">UIScrollView</code> comprising of two <code class="language-plaintext highlighter-rouge">UILabel</code> objects. I could also keep some customisation properties available too.</p>

<p>But the biggest cutback would be removing <code class="language-plaintext highlighter-rouge">CADisplayLink</code> and using <code class="language-plaintext highlighter-rouge">UIView.animate()</code> to get the job done.</p>

<h3 id="setup">Setup</h3>

<p>Let’s go ahead and make a new file in a sample project called <code class="language-plaintext highlighter-rouge">MarqueeLabel</code>. Inside it, put the following:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">var</span> <span class="nv">labels</span><span class="p">:</span> <span class="p">[</span><span class="kt">UILabel</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">var</span> <span class="nv">text</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
        <span class="nf">configure</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">textColor</span><span class="p">:</span> <span class="kt">UIColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">textColor</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">boldSystemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="n">font</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Remember that we’re faking our marquee effect by using a <code class="language-plaintext highlighter-rouge">UIScrollView</code> for the container. We want our child labels to be <code class="language-plaintext highlighter-rouge">private</code>, and only accessible to us. So, we need to define some common <code class="language-plaintext highlighter-rouge">UILabel</code> properties on our <code class="language-plaintext highlighter-rouge">MarqueeLabel</code>, which <code class="language-plaintext highlighter-rouge">UIScrollView</code> types do not normally have, such as <code class="language-plaintext highlighter-rouge">font</code>, <code class="language-plaintext highlighter-rouge">textColor</code>, and <code class="language-plaintext highlighter-rouge">text</code>.</p>

<p>Let’s define some more properties:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">scrollDelay</span><span class="p">:</span> <span class="kt">TimeInterval</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">// seconds</span>

<span class="k">var</span> <span class="nv">duration</span><span class="p">:</span> <span class="kt">TimeInterval</span> <span class="o">=</span> <span class="mi">6</span> <span class="c1">// seconds</span>

<span class="k">var</span> <span class="nv">spaceBetweenLabels</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">50</span> <span class="c1">// points</span></code></pre></figure>

<p>These properties are pretty self-explanatory, right? The first controls how long the animation ought to wait before repeating; the second controls how long we should animate for; and the third one controls the space between the labels.</p>

<h3 id="implementation">Implementation</h3>

<p>Now that all the properties have been defined, let’s actually get it working. To do that, first we need to do some setup. The illusion will be spoiled if the user can see the scroll bar moving during the animation, or if they can interact with the scroll view as it’s already animating.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>
    <span class="nf">commonInit</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
    <span class="nf">commonInit</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">commonInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">showsVerticalScrollIndicator</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">showsHorizontalScrollIndicator</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">isScrollEnabled</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">isUserInteractionEnabled</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
    <span class="n">clipsToBounds</span> <span class="o">=</span> <span class="kc">true</span>

    <span class="nf">addLabels</span><span class="p">()</span>
    <span class="nf">configure</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>Next, we need to implement the <code class="language-plaintext highlighter-rouge">addLabels()</code> and <code class="language-plaintext highlighter-rouge">configure()</code> functions, which are obviously missing:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">contentOffset</span> <span class="o">=</span> <span class="o">.</span><span class="n">zero</span>
    <span class="n">layer</span><span class="o">.</span><span class="nf">removeAllAnimations</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">configure</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Stop all existing operation</span>
    <span class="nf">stop</span><span class="p">()</span>

    <span class="c1">// Relayout the labels</span>
    <span class="nf">layoutLabels</span><span class="p">()</span>

    <span class="c1">// Ensure the contentSize is accurate</span>
    <span class="nf">configureContentSize</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">addLabels</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">2</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">textColor</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
        <span class="n">labels</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">layoutLabels</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">offset</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">labels</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
        <span class="nv">$0</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="nv">$0</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="n">font</span>
        <span class="nv">$0</span><span class="o">.</span><span class="nf">sizeToFit</span><span class="p">()</span>
        <span class="nv">$0</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">offset</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="nv">$0</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">bounds</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
        <span class="nv">$0</span><span class="o">.</span><span class="n">center</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="nv">$0</span><span class="o">.</span><span class="n">center</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="n">center</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">frame</span><span class="o">.</span><span class="n">minY</span><span class="p">))</span>

        <span class="n">offset</span> <span class="o">+=</span> <span class="nf">round</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span><span class="p">)</span> <span class="o">+</span> <span class="n">spaceBetweenLabels</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="nf">configureContentSize</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">mainLabel</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

    <span class="k">var</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGSize</span> <span class="o">=</span> <span class="o">.</span><span class="n">zero</span>
    <span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">mainLabel</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">spaceBetweenLabels</span>
    <span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">height</span>
    <span class="n">contentSize</span> <span class="o">=</span> <span class="n">size</span>
<span class="p">}</span></code></pre></figure>

<h4 id="breakpoint">Breakpoint</h4>

<p>What do these functions <em>do</em> though? Let’s break them down:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">stop()</code>: Removes any active animations, and resets the position of the “label” to 0.</li>
  <li><code class="language-plaintext highlighter-rouge">configure()</code>: The above, in addition to laying out the labels and making sure the scrollable size of the <code class="language-plaintext highlighter-rouge">UIScrollView</code> is correct - the <code class="language-plaintext highlighter-rouge">contentSize</code> property.</li>
  <li><code class="language-plaintext highlighter-rouge">addLabels()</code>: Loops from 0 to 1, and adds a label to our scroll view for each iteration.</li>
  <li><code class="language-plaintext highlighter-rouge">layoutLabels()</code>: For each label, position it at the offset (starting at 0) on the <em>x</em>-axis, give it the text, font, and center positions. Then increment the offset for the next iteration. Our second label’s <em>x</em>-position should be <code class="language-plaintext highlighter-rouge">0 + width_of_label_one + spacing</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">configureContentSize()</code>: Ensures that the scrollable area is enough.</li>
</ul>

<h3 id="animate">Animate!</h3>

<p>To animate our label, we need to define just <em>two</em> more functions:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">mainLabel</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="n">mainLabel</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

    <span class="k">let</span> <span class="nv">labelWidth</span> <span class="o">=</span> <span class="n">mainLabel</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span>
    <span class="k">let</span> <span class="nv">delay</span> <span class="o">=</span> <span class="n">scrollDelay</span>

    <span class="n">contentOffset</span> <span class="o">=</span> <span class="o">.</span><span class="n">zero</span>

    <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span>
        <span class="nv">withDuration</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span>
        <span class="nv">delay</span><span class="p">:</span> <span class="n">scrollDelay</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span>
        <span class="nv">options</span><span class="p">:</span> <span class="p">([</span><span class="o">.</span><span class="n">curveLinear</span><span class="p">]),</span>
        <span class="nv">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
            <span class="k">self</span><span class="o">.</span><span class="n">contentOffset</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">labelWidth</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">spaceBetweenLabels</span>
        <span class="p">},</span>
        <span class="nv">completion</span><span class="p">:</span> <span class="p">{</span> <span class="n">isCompleted</span> <span class="k">in</span>
            <span class="k">if</span> <span class="n">isCompleted</span> <span class="p">{</span>
                <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="n">delay</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
                    <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="nf">start</span><span class="p">()</span> <span class="c1">// recursive, must weakify self</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">scrollIfNeeded</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">mainLabel</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">first</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>

    <span class="k">if</span> <span class="n">mainLabel</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="p">{</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">}</span>
        <span class="nf">start</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">labels</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nv">$0</span> <span class="o">!=</span> <span class="n">mainLabel</span> <span class="p">}</span>
        <span class="n">contentSize</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">size</span>
        <span class="n">mainLabel</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">bounds</span>
        <span class="n">mainLabel</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">left</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="breakpoint-1">Breakpoint</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">scrollIfNeeded()</code>: Checks if there’s at least one label exceeding the container size, and scrolls if so.</li>
  <li><code class="language-plaintext highlighter-rouge">start()</code>: Animates! On completion, we recursively (and weakly!) call <code class="language-plaintext highlighter-rouge">start()</code> again to continuously trigger the animation after our delay.</li>
</ul>

<h3 id="finally">Finally</h3>

<p>This implementation is <em>far leaner</em> than my earlier iteration. It is worth noting that I initially switched to <code class="language-plaintext highlighter-rouge">CADisplayLink</code> to avoid the pre-iOS 5 problem of <em>the entire</em> app having touches blocked if an animation was taking place, and that’s roughly when this code was written!</p>

<p>If we want different animation curves, we can expose a property onto our <code class="language-plaintext highlighter-rouge">MarqueeLabel</code> and pass that into our animation block! Whichever is supported by <code class="language-plaintext highlighter-rouge">UIView.animate</code> will work.</p>

<p><img src="/assets/img/marquee.gif" /></p>

<p>Nice right? 🙌</p>

<p><a href="https://github.com/topLayoutGuide/UIScrollLabel">GITHUB</a></p>
:ET