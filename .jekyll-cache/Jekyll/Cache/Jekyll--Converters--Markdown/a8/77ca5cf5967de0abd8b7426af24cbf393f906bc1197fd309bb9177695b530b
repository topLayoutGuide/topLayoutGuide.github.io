I"c<p>In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move‚Ä¶ just kidding!</p>

<p>It all started in 2019. On one Thursday evening at the office, I had some bandwidth available to tackle a long-standing thorn in my team‚Äôs side ‚Äî enabling manual deployment using our CircleCI environment.</p>

<p>Up until then, we had had various ideas of using (see: building &amp; maintaining) different tools, or utilising an entirely separate service, to achieve our end-goal. Ideally, we should have been able to tap into the CircleCI API, and trigger jobs this way. It didn‚Äôt look possible with our current setup, and we were upset.</p>

<p>However, we had a simpler solution at hand, unbeknownst to us.</p>

<h3 id="workflows">Workflows</h3>

<p>According to CircleCI‚Äôs documentation, in order to increase the speed of software development through faster feedback, shorter reruns, and more efficient use of resources, we should configure Workflows.</p>

<p>We already used these, and they served us well. However there was a config key which we weren‚Äôt aware of at the time ‚Äî <code class="language-plaintext highlighter-rouge">type: approval</code>.</p>

<p>The documentation surrounding it was confusingly worded and difficult to understand. But after a few re-reads, I got there.</p>

<h3 id="approval">Approval</h3>

<p>When you give a job under a CircleCI workflow the approval type, the ‚Äújob‚Äù must be entirely unique within your <code class="language-plaintext highlighter-rouge">config.yml</code>. For example, if you have three main jobs defined:</p>

<ul>
  <li>build</li>
  <li>test</li>
  <li>deploy</li>
</ul>

<p>Each of which run inside your workflow/s, then the manual trigger must be named something other than any of the above.</p>

<p>It also must be defined only within your workflows. Furthermore, in order for the manual trigger to actually work, another subsequent job must depend upon it.</p>

<p>I named my trigger <code class="language-plaintext highlighter-rouge">deploy-branch</code>. This will only be run when one opens the CircleCI Web UI (via Github in our case), and initiates it manually.</p>

<p>In other words, when one gives approval.</p>

<h3 id="our-results">Our Results</h3>

<p>Once I went ahead and tweaked a workflow to include a job with <code class="language-plaintext highlighter-rouge">type: approval</code>, we had a bona fide manual trigger available to us, finally.</p>

<p>It didn‚Äôt have a fancy interface, such as a Github label or a Slackbot command, however it did exactly what we needed it to do.</p>

<h3 id="conclusion">Conclusion</h3>

<p>As an iOS Developer by specialty, I well and truly stepped outside my comfort zone while fiddling with our CI environment.</p>

<p>However, I feel that this little adventure helped me deepen my skillset overall. Especially when it comes to the build environment enveloping the apps that I help create.</p>

<p>I can only hope that this helps other teams‚Ä¶ If you already knew how to do this, then good for you! However I didn‚Äôt, so I decided to blog about it. üòã</p>

<p>Thanks for reading!</p>
:ET