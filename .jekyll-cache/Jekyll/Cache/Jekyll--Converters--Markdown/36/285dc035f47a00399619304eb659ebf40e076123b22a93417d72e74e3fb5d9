I"u+<h4 id="impact-i-felt-your-impact">Impact. I felt your impact.</h4>

<h3 id="baby-you-move-my-spirit">Baby, you move my spirit</h3>

<p>Some of my favourite coding challenges are of the UI implementation kind. One day at work, the design team demonstrated a mockup to me, and mentioned they’d “love it” if I could hide and show the view as demoed.</p>

<p>Upon asking for a real-world example, I was shown AirBNB’s iOS app:</p>

<p><img src="/assets/img/parallax.gif" /></p>

<p>I’m glad I’m able to “speak Designer.” I understood that while I had other options at my disposal to do it from a technical perspective, it wouldn’t match the goals design had for the product I was working on. I decided that I should aim for a result as-close-possible to the AirBNB app implementation, and sought permission to fall back on an alternative, should only it be technically infeasible to do.</p>

<blockquote>
  <p>The view should hide, sliding upward with the user scrolling down. Regardless of the final scroll position, the view should show, sliding downward with the user scrolling up.</p>
</blockquote>

<p>I rolled up my sleeves and started planning.</p>

<hr />

<p>After some investigation, I noticed that the effect requested was not unique to AirBNB’s app at all. After a cursory glance at StackOverflow, I learned that many other engineers also wished to implement this effect, without the slightest idea as to how.</p>

<p>Right away one thing was clear. I needed to “just get it working.” I would at first, do this with straight up UIKit. Our app’s required ReactiveSwift version, would need to come second.</p>

<h3 id="oh-i-want-to-taste-it">Oh I want to taste it!</h3>

<p>Firstly, I determined the components I needed to use in order to achieve the goal. In my case, it was a <code class="language-plaintext highlighter-rouge">UICollectionView</code> (aka <code class="language-plaintext highlighter-rouge">UIScrollView</code>) paired with a bog-standard <code class="language-plaintext highlighter-rouge">UIView</code>. So I setup a dummy project to muck about in.</p>

<p>Because <code class="language-plaintext highlighter-rouge">UICollectionView</code> and <code class="language-plaintext highlighter-rouge">UITableView</code> inherit from <code class="language-plaintext highlighter-rouge">UIScrollView</code>, I used methods from <code class="language-plaintext highlighter-rouge">UIScrollViewDelegate</code> with my collection view. One in particular was most important - <code class="language-plaintext highlighter-rouge">scrollViewDidScroll</code> because it provides an update per point scrolled.</p>

<p>For my <code class="language-plaintext highlighter-rouge">UIKit</code> implementation, I needed to know the <code class="language-plaintext highlighter-rouge">contentOffset</code> of the scroll view at the time of initial drag. I also needed subsequent updates to the offset. From this information, I could easily discern if I was scrolling up or down.</p>

<p>In my test project, I updated <code class="language-plaintext highlighter-rouge">ViewController.swift</code> with the following:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIScrollViewDelegate</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">scrollViewDidScroll</span><span class="p">(</span><span class="n">_</span> <span class="nv">scrollView</span><span class="p">:</span> <span class="kt">UIScrollView</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">delta</span> <span class="o">=</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">lastContentOffset</span>
    <span class="k">if</span> <span class="n">delta</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
       <span class="c1">// the value is negative, so we're scrolling up</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
       <span class="c1">// the value is positive, so we're scrolling down.</span>
    <span class="p">}</span>
    <span class="c1">// This makes the + or - number quite small.</span>
    <span class="n">lastContentOffset</span> <span class="o">=</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span>
<span class="p">}</span>
  <span class="kd">func</span> <span class="nf">scrollViewDidBeginDragging</span><span class="p">(</span><span class="n">_</span> <span class="nv">scrollView</span><span class="p">:</span> <span class="kt">UIScrollView</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//</span>
    <span class="c1">// Where lastContentOffset is a class variable of type CGFloat</span>
    <span class="c1">//</span>
    <span class="n">lastContentOffset</span> <span class="o">=</span> <span class="n">scrollView</span><span class="o">.</span><span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If I scrolled now, the effect would <em>only somewhat</em> work as desired. It would hide when the user scrolled down, but it would only show again when the user scrolled <em>all the way up</em>. I figured that I needed to restrict the movement of the view, in order to meet the requirements.</p>

<p>This is where some basic math comes in.</p>

<h3 id="math-again">Math, again.</h3>

<p>Remember that Math class you hated in school?</p>

<p>Well, I hate to break it to you, but with programming you need to use a substantial amount of it. I won’t get too advanced on you, though. You might be surprised to know that Sigma-notation is basically a <code class="language-plaintext highlighter-rouge">for</code> loop.</p>

<p>Anyway, in order to prevent the view from moving too far, I settled on a restricted range of CGFloat values.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">Range</span><span class="o">&lt;</span><span class="kt">CGFloat</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="o">..&lt;</span><span class="mi">0</span><span class="p">)</span> 
<span class="c1">// replace n with the height of your view. The left side of the range needs to be negative, in order to allow movement upward.</span>
<span class="c1">// this example allows the view to move -n points upward, and the maximum positive value it can hold is 0.</span></code></pre></figure>

<p>With the above, I’ve defined the range of movement. However, in order to make the effect work as desired, I need to pair this with <code class="language-plaintext highlighter-rouge">min</code> and <code class="language-plaintext highlighter-rouge">max</code>.</p>

<p>I’ll just go ahead and update the if/else block:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">if</span> <span class="n">delta</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
  <span class="c1">// the value is negative, so we're scrolling up and the view is moving back into view.</span>
  <span class="c1">// take whatever is smaller, the constant minus delta, or the upperBound of the range. (0)</span>
  <span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">-</span> <span class="n">delta</span><span class="p">,</span> <span class="n">range</span><span class="o">.</span><span class="n">upperBound</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// the value is positive, so we're scrolling down and the view is moving out of sight.</span>
  <span class="c1">// take whatever is "larger," the constant minus delta, or the lowerBound of the range.</span>
  <span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">range</span><span class="o">.</span><span class="n">lowerBound</span><span class="p">,</span> <span class="n">topConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">-</span> <span class="n">delta</span>
<span class="p">}</span></code></pre></figure>

<p>I’m now successfully restricting the view’s movement! When I scroll down or up, it comes into or out of view exactly as prescribed. Regardless of however far down I have scrolled. Yay!</p>

<p>It mostly works now. However because iOS has a “rubber-banding” effect when scrolling further than the content allows, I have to account for that.</p>

<p>I will make sure I do nothing if I’m at the top of the scroll view, or if I’ve reached the bottom.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">hasReachedTop</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">insetTop</span><span class="p">:</span> <span class="kt">CGFloat</span>
  <span class="n">insetTop</span> <span class="o">=</span> <span class="n">adjustedContentInset</span><span class="o">.</span><span class="n">top</span>
  <span class="k">return</span> <span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="n">insetTop</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">hasReachedBottom</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">insetBottom</span> <span class="o">=</span> <span class="n">adjustedContentInset</span><span class="o">.</span><span class="n">bottom</span>
  <span class="k">return</span> <span class="n">contentSize</span><span class="o">.</span><span class="n">height</span> <span class="o">&lt;=</span> <span class="n">contentOffset</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">bounds</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">insetBottom</span> <span class="o">+</span> <span class="n">distance</span>
<span class="p">}</span></code></pre></figure>

<p>Add these into my logic, and voila!</p>

<p><img src="/assets/img/voila.gif" /></p>

<p>Cool, right? 👍</p>
:ET