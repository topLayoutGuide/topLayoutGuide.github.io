I"6'<h4 id="gretchen-stop-trying-to-make-gradients-happen">Gretchen, Stop Trying To Make Gradients Happen…</h4>

<h3 id="intro">Intro</h3>

<p>If there’s one API that irritated me at the beginning of my career as an iOS developer, it was <code class="language-plaintext highlighter-rouge">CAGradientLayer</code>. As powerful as it is, it’s very verbose and it can be really confronting for a newbie.</p>

<p>Nevertheless, the time came where I had to draw a gradient in an app. No images. I turned to <code class="language-plaintext highlighter-rouge">CAGradientLayer</code> because I already understood it. Unfortunately it confused my team at the time, who were less familiar with it.</p>

<p>A gradient will be drawn between 0 and 1, on both the X (horizontal) and Y (vertical) axes.</p>

<p>This is hard to explain, so let’s look at the image below.</p>

<p><img src="/assets/img/plane.png" /></p>

<p>A <code class="language-plaintext highlighter-rouge">CALayer</code> gradient uses these points. I sometimes see people printing or whiteboarding this, then drawing on it to assist with planning. As we <em>all</em> know, it sucks to make tiny UI changes and rebuild our Xcode projects due to generally long build times.</p>

<p>So I built a wrapper tool back in 2017 to assist in building <code class="language-plaintext highlighter-rouge">CAGradientLayer</code> objects.</p>

<h3 id="the-code">The Code</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">CAGradientLayer</span> <span class="p">{</span>
  <span class="kd">enum</span> <span class="kt">Point</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">topLeft</span>
    <span class="k">case</span> <span class="n">centerLeft</span>
    <span class="k">case</span> <span class="n">bottomLeft</span>
    <span class="k">case</span> <span class="n">topCenter</span>
    <span class="k">case</span> <span class="n">center</span>
    <span class="k">case</span> <span class="n">bottomCenter</span>
    <span class="k">case</span> <span class="n">topRight</span>
    <span class="k">case</span> <span class="n">centerRight</span>
    <span class="k">case</span> <span class="n">bottomRight</span>

    <span class="k">var</span> <span class="nv">point</span><span class="p">:</span> <span class="kt">CGPoint</span> <span class="p">{</span>
      <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">topLeft</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">centerLeft</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">bottomLeft</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">topCenter</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">center</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">bottomCenter</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">topRight</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">centerRight</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">)</span>
      <span class="k">case</span> <span class="o">.</span><span class="nv">bottomRight</span><span class="p">:</span>
        <span class="k">return</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">start</span><span class="p">:</span> <span class="kt">Point</span><span class="p">,</span> <span class="nv">end</span><span class="p">:</span> <span class="kt">Point</span><span class="p">,</span> <span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="kt">CGColor</span><span class="p">],</span> <span class="nv">type</span><span class="p">:</span> <span class="kt">CAGradientLayerType</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="k">self</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">type</span>
    <span class="k">self</span><span class="o">.</span><span class="n">startPoint</span> <span class="o">=</span> <span class="n">start</span><span class="o">.</span><span class="n">point</span>
    <span class="k">self</span><span class="o">.</span><span class="n">endPoint</span> <span class="o">=</span> <span class="n">end</span><span class="o">.</span><span class="n">point</span>
    <span class="k">self</span><span class="o">.</span><span class="n">colors</span> <span class="o">=</span> <span class="n">colors</span>
    <span class="k">self</span><span class="o">.</span><span class="n">locations</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">..&lt;</span><span class="n">colors</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="kt">NSNumber</span><span class="o">.</span><span class="kd">init</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This wrapper is merely a convenience function around the <code class="language-plaintext highlighter-rouge">CGPoint()</code> nastiness that we usually have to deal with.</p>

<p>To use it; all we need is:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">gradient</span> <span class="o">=</span> <span class="kt">CAGradientLayer</span><span class="p">(</span><span class="nv">start</span><span class="p">:</span> <span class="o">.</span><span class="n">center</span><span class="p">,</span> <span class="nv">end</span><span class="p">:</span> <span class="o">.</span><span class="n">bottomRight</span><span class="p">,</span> <span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="n">cgColor</span><span class="p">,</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">white</span><span class="o">.</span><span class="n">cgColor</span><span class="p">],</span> <span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">radial</span><span class="p">)</span>
<span class="n">gradient</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">bounds</span>
<span class="n">view</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="nf">addSublayer</span><span class="p">(</span><span class="n">gradient</span><span class="p">)</span></code></pre></figure>

<p>Make sure the view you’re applying the gradient to has a frame (or bounds) greater than zero, and it will render fine!</p>

<hr />

<p>Easy, no?</p>
:ET