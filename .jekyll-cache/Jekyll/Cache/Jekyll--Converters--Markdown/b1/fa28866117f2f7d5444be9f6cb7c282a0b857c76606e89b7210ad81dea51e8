I"≥<<h4 id="wax-in-wax-out-wait">Wax In. Wax Out‚Ä¶ Wait.</h4>

<p>There may come a time when writing an animation on iOS, that the simple, inbuilt animation ‚Äúcurves‚Äù no longer suit your requirements. If the previous words sent you for a tailspin, read on.</p>

<p>Let‚Äôs start with a quick lesson:</p>

<h3 id="what-are-b√©zier-curves">What Are B√©zier Curves?</h3>

<p>If we get into the specifics of it -</p>

<blockquote>
  <p>A B√©zier curve (pronounced [bezje]) is a parametric curve frequently used in computer graphics and related fields.
‚Äî <strong>Wikipedia</strong></p>
</blockquote>

<p>However most iOS developers simply know them by name. They are;</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">curveEaseIn</code></li>
  <li><code class="language-plaintext highlighter-rouge">curveEaseOut</code></li>
  <li><code class="language-plaintext highlighter-rouge">linear</code> and</li>
  <li><code class="language-plaintext highlighter-rouge">curveEaseInOut</code></li>
</ul>

<p>They are most often used with a call to <code class="language-plaintext highlighter-rouge">UIView.animate()</code>.</p>

<hr />

<p>Let‚Äôs start with <em>linear</em>. If you invoke <code class="language-plaintext highlighter-rouge">UIView.animate(withDuration:)</code> without supplying any options, except the duration and an animation block, it will execute the animation along a linear path. That is to say, the object you are moving will go from A to B at a constant rate until the animation is finished. The path is not ‚Äúcurved‚Äù.</p>

<p><img src="/assets/img/linear.gif" /></p>

<p>Next up, is <code class="language-plaintext highlighter-rouge">curveEaseIn</code>. It‚Äôs similar to <code class="language-plaintext highlighter-rouge">linear</code>, however this time the animation executes along a path which is ‚Äúcurved‚Äù at the start, and ends linearly. The object you are moving will go from A to B, starting off slowly (‚Äúeasing in‚Äù), accelerating to a constant rate, then stopping.</p>

<p>The path itself, should it be drawn or plotted, would look something like this:</p>

<p>Image:
<img src="/assets/img/curveEaseIn.png" /></p>

<p>GIF:
<img src="/assets/img/curveEaseIn.gif" /></p>

<p>You get the idea. <code class="language-plaintext highlighter-rouge">curveEaseOut</code> is the opposite of the above, meaning that the object you‚Äôre moving will go from A to B, starting off at a constant rate, and decelerating slowly to a stop (‚Äúeasing out‚Äù). <code class="language-plaintext highlighter-rouge">curveEaseInOut</code> combines the two.</p>

<h3 id="but-theres-more">But, There‚Äôs More..?</h3>

<p>Oh yes, there are more. By more, I mean anything you can think of!</p>

<p>If your team‚Äôs UI/UX Designer said that the animation ‚Äúcurve‚Äù you‚Äôre using wasn‚Äôt smooth/blunt/whatever enough, what would you do? I‚Äôd hazard a bet that many of you would push back on such criticism.</p>

<p>As for me, I‚Äôm like a Dog, bent on extracting a treat from the inside of a KONG toy. I quickly found a way to make my own ‚Äúcurves‚Äù with <code class="language-plaintext highlighter-rouge">CAAnimation</code> but it required the prolific usage of ‚Äúmagic numbers‚Äù in the code, and the code chunks themselves were very complex. I had to simplify.</p>

<p>If you look at the graph above, you‚Äôll see why. The curve is controlled by two ‚Äúcontrol points‚Äù. The graph above has only 1 visible control point, and it lies at the right-hand side of the orange line.</p>

<p>Loosely translated into code, the graph would read something like:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">controlPoint1</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.34</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.00</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">controlPoint2</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">1.00</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">1.00</span><span class="p">)</span></code></pre></figure>

<p>Thankfully as of iOS 10, Apple now allow us to create our own curves. Instead of being forced to use <code class="language-plaintext highlighter-rouge">CAAnimation</code>, we can use them with something called <code class="language-plaintext highlighter-rouge">UIViewPropertyAnimator</code>.</p>

<h3 id="uiviewpropertyanimator">UIViewPropertyAnimator</h3>

<p>I got creative with my own <code class="language-plaintext highlighter-rouge">easeInEaseOut</code> curve:</p>

<p>// IMG</p>

<p>If we go ahead and create a <code class="language-plaintext highlighter-rouge">class</code> (or a <code class="language-plaintext highlighter-rouge">struct</code>) calling it <code class="language-plaintext highlighter-rouge">CustomCurves</code> for simplicity‚Äôs sake, and define the following within it:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">static</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">curveTightEaseInOut</span><span class="p">:</span> <span class="kt">UITimingCurveProvider</span> <span class="p">{</span>
  <span class="kt">UICubicTimingParameters</span><span class="p">(</span>
    <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.89</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.38</span><span class="p">),</span>
    <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mf">0.11</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mf">0.61</span><span class="p">)</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="kd">static</span> <span class="k">var</span> <span class="nv">curveTightAnimator</span><span class="p">:</span> <span class="kt">UIViewPropertyAnimator</span> <span class="p">{</span>
  <span class="kt">UIViewPropertyAnimator</span><span class="p">(</span>
    <span class="nv">duration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span>
    <span class="nv">timingParameters</span><span class="p">:</span> <span class="n">curveTightEaseInOut</span>
  <span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>You can then use it in your code, the same way as you would a <code class="language-plaintext highlighter-rouge">UIView.animate()</code> as follows:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">viewFrameAnimator</span> <span class="o">=</span> <span class="kt">CustomCurves</span><span class="o">.</span><span class="n">curveTightAnimator</span>
<span class="n">viewFrameAnimator</span><span class="o">.</span><span class="n">addAnimations</span> <span class="p">{</span>
  <span class="c1">// Add animations here...</span>
<span class="p">}</span>
<span class="n">viewFrameAnimator</span><span class="o">.</span><span class="n">addCompletion</span> <span class="p">{</span>
  <span class="c1">// Something when it's done...</span>
<span class="p">}</span>
<span class="n">viewFrameAnimator</span><span class="o">.</span><span class="nf">startAnimation</span><span class="p">()</span></code></pre></figure>

<p>And you know I could attach a gif with a demonstration of the above code here. But I won‚Äôt. Because you should give it a shot üòÑ</p>

<hr />

<p>Let‚Äôs say I queried an API for a list of all movies released in the last twenty years. If I were to display that in an app for iOS, I‚Äôd sort it in alphabetical order since we‚Äôre talking about (potentially) thousands of movies. The UI would be simple, a <code class="language-plaintext highlighter-rouge">UITableView</code> with sections A-through-Z, and a rolodex bar on the right hand side.</p>

<p>I‚Äôve seen an implementation similar to this, many times:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">//</span>
<span class="c1">// NB: Might not compile...</span>
<span class="c1">//</span>

<span class="k">let</span> <span class="nv">alphabet</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>

<span class="k">for</span> <span class="n">letter</span> <span class="k">in</span> <span class="n">alphabet</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">list</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Movies</span><span class="p">]()</span>

  <span class="k">for</span> <span class="n">movie</span> <span class="k">in</span> <span class="n">movies</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">prefix</span> <span class="o">=</span> <span class="n">movie</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="k">prefix</span> <span class="o">==</span> <span class="n">letter</span> <span class="p">{</span>
      <span class="n">list</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">indexedList</span><span class="o">.</span><span class="nf">append</span><span class="p">((</span><span class="n">letter</span><span class="p">,</span> <span class="n">list</span><span class="p">))</span>
<span class="p">}</span></code></pre></figure>

<p>Loosely, what that‚Äôs doing is going through the alphabet and for each matching movie, making a data structure as follows:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="p">[(</span><span class="s">"A"</span><span class="p">:</span> <span class="p">[</span><span class="kt">Movie</span><span class="p">,</span> <span class="kt">Movie</span><span class="p">,</span> <span class="kt">Movie</span><span class="p">]),</span> <span class="p">(</span><span class="s">"B"</span><span class="p">:</span> <span class="p">[</span><span class="kt">Movie</span><span class="p">,</span> <span class="kt">Movie</span><span class="p">]),</span> <span class="p">(</span><span class="s">"C"</span><span class="o">.....</span><span class="p">)]</span></code></pre></figure>

<p>The time complexity of this algorithm would probably be <em>O(n¬≤)</em>. For each time the outer loop runs N, the inner loop runs M times. In other words, the longer the list of movies becomes, the longer it takes for your implementation to do its job.</p>

<p>Using this with an iPhone 6, it takes almost a full two seconds to sort a list of 15,000 items. Frustratingly slow. If you do your sort on <code class="language-plaintext highlighter-rouge">viewWillAppear</code> or <code class="language-plaintext highlighter-rouge">viewDidLoad</code> it will actually block the transition from happening right away.</p>

<h3 id="lets-use-dictionary-grouping">Let‚Äôs Use Dictionary Grouping</h3>

<p>We can somewhat overcome this by using Dictionary grouping in Swift. I took my list of movies, and wrote a predicate:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">predicate</span><span class="p">:</span> <span class="p">(</span><span class="kt">Movie</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">else</span> <span class="p">{</span> <span class="nf">fatalError</span><span class="p">()</span> <span class="p">}</span>
  
  <span class="k">let</span> <span class="nv">alphabet</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>
  <span class="k">let</span> <span class="nv">numeric</span> <span class="o">=</span> <span class="s">"0123456789"</span>
  <span class="k">if</span> <span class="n">alphabet</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">c</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">numeric</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"#"</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">"?"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I have defined my rules with the predicate. If the title of the movie begins with an alphabet character, group that movie in the appropriate category. If the title of the movie begins with a number, group it under #, and lastly under ? if it doesn‚Äôt match any of the above.</p>

<p>Then I created a Dictionary, giving it my predicate, and sort it in ascending order.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">grouped</span> <span class="o">=</span> <span class="kt">Dictionary</span><span class="p">(</span><span class="nv">grouping</span><span class="p">:</span> <span class="n">movies</span><span class="p">,</span> <span class="nv">by</span><span class="p">:</span> <span class="n">predicate</span><span class="p">)</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="nv">$1</span><span class="o">.</span><span class="mi">0</span> <span class="p">}</span></code></pre></figure>

<p>This results in the data structure I desire. The time taken was reduced from two seconds, to a mere 146ms (or 0.146 seconds) on an iPhone 6, sorting the same 15,000 items. I also sampled this on an iPhone X, and was pleasantly surprised by the 25ms (0.025 second) result.</p>

<hr />

<h3 id="conclusion">Conclusion</h3>

<p>It‚Äôs up to you on how you want to partition your data. You can reinvent the wheel, or you can use things that Swift provides to you out of the box. Hopefully this post has given you some motivation to improve your apps, or learn Swift!</p>

<p>In a future iteration of this, I turned it into a service object which I can then Mock for unit testing. I‚Äôll post this later.</p>
:ET