---
layout: post
title:  "So I Wanted To Hide A UIView"
date:   2021-02-23 20:42:00
color:  "SEC"
---

#### Impact. I felt your impact.

### Baby, you move my spirit

Some of my favourite coding challenges are of the UI implementation kind. One day at work, the design team demonstrated a mockup to me, and mentioned they‚Äôd ‚Äúlove it‚Äù if I could hide and show the view as demoed. 

Upon asking for a real-world example, I was shown AirBNB‚Äôs iOS app:

<img src="{{site.baseUrl}}/assets/img/parallax.gif"/>

I'm glad I'm able to "speak Designer." I understood that while I had other options at my disposal to do it from a technical perspective, it wouldn‚Äôt match the goals design had for the product I was working on. I decided that I should aim for a result as-close-possible to the AirBNB app implementation, and sought permission to fall back on an alternative, should only it be technically infeasible to do.

>The view should hide, sliding upward with the user scrolling down. Regardless of the final scroll position, the view should show, sliding downward with the user scrolling up.

I rolled up my sleeves and started planning.

---

After some investigation, I noticed that the effect requested was not unique to AirBNB‚Äôs app at all. After a cursory glance at StackOverflow, I learned that many other engineers also wished to implement this effect, without the slightest idea as to how.

Right away one thing was clear. I needed to "just get it working." I would at first, do this with straight up UIKit. Our app‚Äôs required ReactiveSwift version, would need to come second.

### Oh I want to taste it!

Firstly, I determined the components I needed to use in order to achieve the goal. In my case, it was a `UICollectionView` (aka `UIScrollView`) paired with a bog-standard `UIView`. So I setup a dummy project to muck about in.

Because `UICollectionView` and `UITableView` inherit from `UIScrollView`, I used methods from `UIScrollViewDelegate` with my collection view. One in particular was most important - `scrollViewDidScroll` because it provides an update per point scrolled. 

For my `UIKit` implementation, I needed to know the `contentOffset` of the scroll view at the time of initial drag. I also needed subsequent updates to the offset. From this information, I could easily discern if I was scrolling up or down.

In my test project, I updated `ViewController.swift` with the following:

{% highlight swift %}
extension ViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    let delta = scrollView.contentOffset.y - lastContentOffset
    if delta < 0 {
       // the value is negative, so we're scrolling up
    } else {
       // the value is positive, so we're scrolling down.
    }
    // This makes the + or - number quite small.
    lastContentOffset = scrollView.contentOffset.y
}
  func scrollViewDidBeginDragging(_ scrollView: UIScrollView) {
    //
    // Where lastContentOffset is a class variable of type CGFloat
    //
    lastContentOffset = scrollView.contentOffset.y
  }
}
{% endhighlight %}

If I scrolled now, the effect would _only somewhat_ work as desired. It would hide when the user scrolled down, but it would only show again when the user scrolled _all the way up_. I figured that I needed to restrict the movement of the view, in order to meet the requirements.

This is where some basic math comes in.

### Math, again.

Remember that Math class you hated in school? 

Well, I hate to break it to you, but with programming you need to use a substantial amount of it. I won‚Äôt get too advanced on you, though. You might be surprised to know that Sigma-notation is basically a `for` loop.

Anyway, in order to prevent the view from moving too far, I settled on a restricted range of CGFloat values.

{% highlight swift %}
let range: Range<CGFloat> = (-n..<0) 
// replace n with the height of your view. The left side of the range needs to be negative, in order to allow movement upward.
// this example allows the view to move -n points upward, and the maximum positive value it can hold is 0.
{% endhighlight %}

With the above, I‚Äôve defined the range of movement. However, in order to make the effect work as desired, I need to pair this with `min` and `max`. 

I‚Äôll just go ahead and update the if/else block:

{% highlight swift %}
if delta < 0 {
  // the value is negative, so we're scrolling up and the view is moving back into view.
  // take whatever is smaller, the constant minus delta, or the upperBound of the range. (0)
  topConstraint.constant = min(topConstraint.constant - delta, range.upperBound)
} else {
  // the value is positive, so we're scrolling down and the view is moving out of sight.
  // take whatever is "larger," the constant minus delta, or the lowerBound of the range.
  topConstraint.constant = max(range.lowerBound, topConstraint.constant - delta
}
{% endhighlight %}

I‚Äôm now successfully restricting the view‚Äôs movement! When I scroll down or up, it comes into or out of view exactly as prescribed. Regardless of however far down I have scrolled. Yay!

It mostly works now. However because iOS has a "rubber-banding" effect when scrolling further than the content allows, I have to account for that.

I will make sure I do nothing if I'm at the top of the scroll view, or if I've reached the bottom.

{% highlight swift %}
var hasReachedTop: Bool {
  let insetTop: CGFloat
  insetTop = adjustedContentInset.top
  return contentOffset.y <= -insetTop
}

var hasReachedBottom: Bool {
  let insetBottom = adjustedContentInset.bottom
  return contentSize.height <= contentOffset.y + bounds.height - insetBottom + distance
}
{% endhighlight %}

Add these into my logic, and voila!

<img src="{{ site.baseUrl }}/assets/img/voila.gif"/>

Cool, right? üëç

Next up... I need to do a `ReactiveSwift` version... _sigh..._

### Sample Project

Here is a sample repository demonstrating this effect. Feel free to take the code and use it however you like. I welcome all feedback too!

[GITHUB](https://github.com/topLayoutGuide/ios-parallax-view)
