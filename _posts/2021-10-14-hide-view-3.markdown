---
layout: post
title:  "Swift: So I Wanted To Hide A UIView... Combine-ly"
date:   2021-10-14 12:00:00
color:  "SEC"
---

#### A Few Times I Been Around That Track!

### Oooooh...

A while ago in the previous installment, I implemented the following effect, as seen in the AirBNB app, using ReactiveSwift. 

<img src="{{site.baseUrl}}/assets/img/parallax.gif"/>

In my never-ceasing desire to avoid as many third-party dependencies as possible, I decided to write it _for a third time_. Only this time I would use Combine.

It was fairly trivial to convert the ReactiveSwift code into Combine. I used the same view model structure I've used in previous posts too!

### Setting Up The View Model

In our sample project from Part I, make a new file and call it `MainViewModel`. Put the following inside it:

{% highlight swift %}
import UIKit
import Combine

protocol ViewModel: ObservableObject {
    associatedtype Input: Equatable
    var cancellables: [AnyCancellable] { get }
    func apply(_ input: Input)
}

class MainViewModel: ViewModel {

    // MARK: - Init
    // Any dependencies (services, properties et al) can be injected here

    init() {
        bind()
    }

    var cancellables: [AnyCancellable] = []

    // MARK: - Input

    enum Input: Equatable {
        
    }

    func apply(_ input: Input) {
        
    }

    // MARK: - Binding View Model
    private func bind() {

    }
}
{% endhighlight %}

Update your Input and Output areas with:

{% highlight swift %}
let scrollViewDidScrollSubject = PassthroughSubject<Input.ScrollInfo, Never>()

enum Input: Equatable {
  struct ScrollInfo: Equatable {
    var contentOffsetY: CGFloat
    var topConstraintConstant: CGFloat
    var heightOfViewToMove: CGFloat
    var hasReachedTop: Bool
    var hasReachedBottom: Bool
  }

  case scrollViewDidScroll(ScrollInfo)
}

func apply(_ input: Input) {
  switch input {
    case .scrollViewDidScroll(let info): scrollViewDidScrollSubject.send(info)
  }
}

// MARK: - Output
@Published var scrollViewValue: CGFloat = 0

{% endhighlight %}

Finally, update the `bindIO()` func with _almost_ the same logic that we used with the ReactiveSwift implementation! ðŸ™Œ

{% highlight swift %}
private func bind() {
  scrollViewDidScrollSubject
    .scan(Optional<(Input.ScrollInfo?, Input.ScrollInfo)>.none) { ($0?.1, $1) }
    .compactMap { $0 }
    .eraseToAnyPublisher()
    .filter { $0?.hasReachedTop == false && $0?.hasReachedBottom == false && !$1.hasReachedTop && !$1.hasReachedBottom }
    .compactMap { previous, current -> CGFloat? in
      guard let previous = previous else { return nil }

      let minimumConstantValue = CGFloat(-current.heightOfViewToMove)
      let delta = current.contentOffsetY - previous.contentOffsetY
      if delta < 0 {
        return min(current.topConstraintConstant - delta, 0)
      } else {
        return max(minimumConstantValue, current.topConstraintConstant - delta)
      }
    }
    .assign(to: \.scrollViewValue, on: self)
    .store(in: &cancellables)
}
{% endhighlight %}

#### Step By Step

- Take the subject...
- Use `.scan` in place of `combinePrevious()` to take the previous and current values.
- Use `.compactMap { $0 }` to trim out Optionals
- Use `.filter {}` to skip or permit operations. Think of it like an `if/else` block.
- Use `.compactMap {}` again to return our final value.
- Assign the value
- Store the cancellable.

### Revisiting The View Controller

In your ViewController, add an instance of the ViewModel class. I suggest to make this instance `private` because a view model should _ideally_ belong to a single view controller. Also add an array of cancellables.

Now, update the `UIScrollViewDelegate` implementation we previously used with:

{% highlight swift %}
extension ViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    viewModel
      .apply(
      .scrollViewDidScroll(
        .init(
          contentOffsetY: scrollView.contentOffset.y,
          topConstraintConstant: topConstraint.constant,
          heightOfViewToMove: movingView.bounds.height,
          hasReachedTop: scrollView.hasReachedTop,
          hasReachedBottom: scrollView.hasReachedBottom
        )
      )
    )
  }
}
{% endhighlight %}

Notice how we don't need `scrollViewWillBeginDragging` anymore, nor the `lastContentOffset` property, OR the `range` property!

### Observing The Value

Observing the change is a bit different with a Combine-based View Model, compared to a ReactiveSwift one. It's pretty simple though!

Inside `viewDidLoad()`, start observing values:

{% highlight swift %}
viewModel
  .$scrollViewValue
  .sink { [weak self] value in
    self?.topConstraint.constant = value
  }
  .store(in: &cancellables)
{% endhighlight %}

It doesn't matter that you start listening in `viewDidLoad` either. The `.sink { }` block will be called whenever there's a value! The cancellables will be destroyed when the ViewController is. Werk!

### Finally

Doesn't it look nice!

<img src="{{site.baseUrl}}/assets/img/combine.gif"/>

In the time since the first and second parts were written, I have extensively studied ReactiveSwift, RxSwift and Combine. So writing it in this way was easy for me.

As always, we need to be careful of UIKit behaviour changing in the future, so as always tread carefully. ðŸ˜‰ 

Thanks for reading! The source code is available on [GITHUB](https://github.com/topLayoutGuide/ios-parallax-view) on the `combine-ver` branch.